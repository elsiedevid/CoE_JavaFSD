import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.logging.*;


class Product {
    private String productID;
    private String name;
    private int quantity;
    private Location location;

    public Product(String productID, String name, int quantity, Location location) {
        this.productID = productID;
        this.name = name;
        this.quantity = quantity;
        this.location = location;
    }

    public String getProductID() { return productID; }
    public String getName() { return name; }
    public int getQuantity() { return quantity; }
    public Location getLocation() { return location; }

    public void setQuantity(int quantity) { this.quantity = quantity; }
}


class Location {
    private int aisle, shelf, bin;

    public Location(int aisle, int shelf, int bin) {
        this.aisle = aisle;
        this.shelf = shelf;
        this.bin = bin;
    }

    @Override
    public String toString() {
        return "Aisle: " + aisle + ", Shelf: " + shelf + ", Bin: " + bin;
    }
}


class Order {
    enum Priority { STANDARD, EXPEDITED }
    private String orderID;
    private List<String> productIDs;
    private Priority priority;

    public Order(String orderID, List<String> productIDs, Priority priority) {
        this.orderID = orderID;
        this.productIDs = productIDs;
        this.priority = priority;
    }

    public String getOrderID() { return orderID; }
    public List<String> getProductIDs() { return productIDs; }
    public Priority getPriority() { return priority; }
}


class OrderComparator implements Comparator<Order> {
    public int compare(Order o1, Order o2) {
        return o1.getPriority().compareTo(o2.getPriority());
    }
}


class OutOfStockException extends Exception {
    public OutOfStockException(String message) {
        super(message);
    }
}


class InventoryManager {
    private Map<String, Product> products = new ConcurrentHashMap<>();
    private PriorityQueue<Order> orderQueue = new PriorityQueue<>(new OrderComparator());
    private static final Logger logger = Logger.getLogger(InventoryManager.class.getName());

    public synchronized void addProduct(Product product) {
        products.put(product.getProductID(), product);
        logger.info("Product added: " + product.getName());
    }

    public synchronized void placeOrder(Order order) {
        orderQueue.offer(order);
        logger.info("Order placed: " + order.getOrderID());
    }

    public void processOrders() {
        ExecutorService executor = Executors.newFixedThreadPool(3);
        while (!orderQueue.isEmpty()) {
            Order order = orderQueue.poll();
            executor.submit(() -> fulfillOrder(order));
        }
        executor.shutdown();
    }

    private synchronized void fulfillOrder(Order order) {
        try {
            for (String productID : order.getProductIDs()) {
                Product product = products.get(productID);
                if (product == null || product.getQuantity() <= 0) {
                    throw new OutOfStockException("Product out of stock: " + productID);
                }
                product.setQuantity(product.getQuantity() - 1);
            }
            logger.info("Order fulfilled: " + order.getOrderID());
        } catch (OutOfStockException e) {
            logger.warning(e.getMessage());
        }
    }
}


public class WarehouseSystem {
    public static void main(String[] args) {
        InventoryManager inventoryManager = new InventoryManager();

        // Adding products
        inventoryManager.addProduct(new Product("P001", "Laptop", 10, new Location(1, 2, 3)));
        inventoryManager.addProduct(new Product("P002", "Phone", 5, new Location(2, 1, 4)));
        
        // Placing orders
        inventoryManager.placeOrder(new Order("O001", Arrays.asList("P001", "P002"), Order.Priority.EXPEDITED));
        inventoryManager.placeOrder(new Order("O002", Arrays.asList("P002"), Order.Priority.STANDARD));

        // Processing orders
        inventoryManager.processOrders();
    }
}
